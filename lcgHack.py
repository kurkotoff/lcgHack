#LCG:
#X(N+1) = (X(N) * A + C) mod M

from sys import argv
import argparse

parser = argparse.ArgumentParser(description='Calculate different elements of the LCG algorythm')

parser.add_argument('-t', '--testing-mode',
                    nargs=1,
                    type=int,
                    help='Testing mode (see tooltip)'
                    )
parser.add_argument('-m', '--module',
					nargs=1,
					type=int,
					help='The LCG module')

parser.add_argument('-a', '--multiplier',
					nargs=1,
					type=int,
					help='The LCG multiplier')

parser.add_argument('-c', '--increment',
					nargs=1,
					type=int,
					help='The LCG increment')

parser.add_argument('-x', '--known-elements',
					nargs='+',
					type=int,
					help='Know numbers generated by the algorythm')


args = parser.parse_args()


class Calculator():
	def __init__(self,testingMode, M, C, A, X):
		self.testingMode = int(testingMode)
		self.A = int(A)
		self.C = int(C)
		self.M = int(M)
		self.X = [int(num) for num in X]

	def testOut(self):
		print(f"""mode: {self.testingMode}
A =  {self.A}
C =  {self.C}
M =  {self.M}
X = {self.X}
""")

	def detectMode(self):
		#print("Detecting mode")
		if self.testingMode == 0:
			#print("Mode detected")
			self.calcNext()

		elif self.testingMode == 1:
			self.calcModule()

	def calcNext(self):
		print("The next number will be: ", end='')
		next = (self.X[-1] * self.A + self.C) % self.M
		print(next)

	def calcIncrement(self):
		pass

def genCalc():
	calc = Calculator(args.testing_mode[0], args.module[0], args.increment[0], args.multiplier[0], args.known_elements)
	return calc

def main():
	lcgCalc = genCalc()
	lcgCalc.testOut()

if __name__ == "__main__":
	main()